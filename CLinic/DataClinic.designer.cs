#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CLinic
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Clinic")]
	public partial class DataClinicDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertReferrals(Referrals instance);
    partial void UpdateReferrals(Referrals instance);
    partial void DeleteReferrals(Referrals instance);
    partial void InsertSpecializations(Specializations instance);
    partial void UpdateSpecializations(Specializations instance);
    partial void DeleteSpecializations(Specializations instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    partial void InsertUserCategories(UserCategories instance);
    partial void UpdateUserCategories(UserCategories instance);
    partial void DeleteUserCategories(UserCategories instance);
    partial void InsertVisits(Visits instance);
    partial void UpdateVisits(Visits instance);
    partial void DeleteVisits(Visits instance);
    #endregion
		
		public DataClinicDataContext() : 
				base(global::CLinic.Properties.Settings.Default.ClinicConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClinicDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClinicDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClinicDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClinicDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Referrals> Referrals
		{
			get
			{
				return this.GetTable<Referrals>();
			}
		}
		
		public System.Data.Linq.Table<Specializations> Specializations
		{
			get
			{
				return this.GetTable<Specializations>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
		
		public System.Data.Linq.Table<UserCategories> UserCategories
		{
			get
			{
				return this.GetTable<UserCategories>();
			}
		}
		
		public System.Data.Linq.Table<Visits> Visits
		{
			get
			{
				return this.GetTable<Visits>();
			}
		}
		
		public System.Data.Linq.Table<ViewSpecializations> ViewSpecializations
		{
			get
			{
				return this.GetTable<ViewSpecializations>();
			}
		}
		
		public System.Data.Linq.Table<ViewUsers> ViewUsers
		{
			get
			{
				return this.GetTable<ViewUsers>();
			}
		}
		
		public System.Data.Linq.Table<ViewUserWithoutAdmin> ViewUserWithoutAdmin
		{
			get
			{
				return this.GetTable<ViewUserWithoutAdmin>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Referrals")]
	public partial class Referrals : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReferralID;
		
		private System.Nullable<int> _DoctorID;
		
		private int _PatientID;
		
		private System.DateTime _CreationDate;
		
		private string _ReferralNumber;
		
		private System.Nullable<int> _SpecializationId;
		
		private EntitySet<Visits> _Visits;
		
		private EntityRef<Specializations> _Specializations;
		
		private EntityRef<Users> _Users;
		
		private EntityRef<Users> _Users1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReferralIDChanging(int value);
    partial void OnReferralIDChanged();
    partial void OnDoctorIDChanging(System.Nullable<int> value);
    partial void OnDoctorIDChanged();
    partial void OnPatientIDChanging(int value);
    partial void OnPatientIDChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnReferralNumberChanging(string value);
    partial void OnReferralNumberChanged();
    partial void OnSpecializationIdChanging(System.Nullable<int> value);
    partial void OnSpecializationIdChanged();
    #endregion
		
		public Referrals()
		{
			this._Visits = new EntitySet<Visits>(new Action<Visits>(this.attach_Visits), new Action<Visits>(this.detach_Visits));
			this._Specializations = default(EntityRef<Specializations>);
			this._Users = default(EntityRef<Users>);
			this._Users1 = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferralID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReferralID
		{
			get
			{
				return this._ReferralID;
			}
			set
			{
				if ((this._ReferralID != value))
				{
					this.OnReferralIDChanging(value);
					this.SendPropertyChanging();
					this._ReferralID = value;
					this.SendPropertyChanged("ReferralID");
					this.OnReferralIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", DbType="Int")]
		public System.Nullable<int> DoctorID
		{
			get
			{
				return this._DoctorID;
			}
			set
			{
				if ((this._DoctorID != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctorIDChanging(value);
					this.SendPropertyChanging();
					this._DoctorID = value;
					this.SendPropertyChanged("DoctorID");
					this.OnDoctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int NOT NULL")]
		public int PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					if (this._Users1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="Date NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferralNumber", DbType="VarChar(18) NOT NULL", CanBeNull=false)]
		public string ReferralNumber
		{
			get
			{
				return this._ReferralNumber;
			}
			set
			{
				if ((this._ReferralNumber != value))
				{
					this.OnReferralNumberChanging(value);
					this.SendPropertyChanging();
					this._ReferralNumber = value;
					this.SendPropertyChanged("ReferralNumber");
					this.OnReferralNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecializationId", DbType="Int")]
		public System.Nullable<int> SpecializationId
		{
			get
			{
				return this._SpecializationId;
			}
			set
			{
				if ((this._SpecializationId != value))
				{
					if (this._Specializations.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecializationIdChanging(value);
					this.SendPropertyChanging();
					this._SpecializationId = value;
					this.SendPropertyChanged("SpecializationId");
					this.OnSpecializationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Referrals_Visits", Storage="_Visits", ThisKey="ReferralID", OtherKey="ReferralID")]
		public EntitySet<Visits> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specializations_Referrals", Storage="_Specializations", ThisKey="SpecializationId", OtherKey="SpecializationID", IsForeignKey=true)]
		public Specializations Specializations
		{
			get
			{
				return this._Specializations.Entity;
			}
			set
			{
				Specializations previousValue = this._Specializations.Entity;
				if (((previousValue != value) 
							|| (this._Specializations.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Specializations.Entity = null;
						previousValue.Referrals.Remove(this);
					}
					this._Specializations.Entity = value;
					if ((value != null))
					{
						value.Referrals.Add(this);
						this._SpecializationId = value.SpecializationID;
					}
					else
					{
						this._SpecializationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Specializations");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Referrals", Storage="_Users", ThisKey="DoctorID", OtherKey="UserID", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Referrals.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Referrals.Add(this);
						this._DoctorID = value.UserID;
					}
					else
					{
						this._DoctorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Referrals1", Storage="_Users1", ThisKey="PatientID", OtherKey="UserID", IsForeignKey=true)]
		public Users Users1
		{
			get
			{
				return this._Users1.Entity;
			}
			set
			{
				Users previousValue = this._Users1.Entity;
				if (((previousValue != value) 
							|| (this._Users1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users1.Entity = null;
						previousValue.Referrals1.Remove(this);
					}
					this._Users1.Entity = value;
					if ((value != null))
					{
						value.Referrals1.Add(this);
						this._PatientID = value.UserID;
					}
					else
					{
						this._PatientID = default(int);
					}
					this.SendPropertyChanged("Users1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Visits(Visits entity)
		{
			this.SendPropertyChanging();
			entity.Referrals = this;
		}
		
		private void detach_Visits(Visits entity)
		{
			this.SendPropertyChanging();
			entity.Referrals = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Specializations")]
	public partial class Specializations : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SpecializationID;
		
		private string _SpecializationName;
		
		private System.Data.Linq.Binary _SpecializationImage;
		
		private EntitySet<Referrals> _Referrals;
		
		private EntitySet<Users> _Users;
		
		private EntitySet<Visits> _Visits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpecializationIDChanging(int value);
    partial void OnSpecializationIDChanged();
    partial void OnSpecializationNameChanging(string value);
    partial void OnSpecializationNameChanged();
    partial void OnSpecializationImageChanging(System.Data.Linq.Binary value);
    partial void OnSpecializationImageChanged();
    #endregion
		
		public Specializations()
		{
			this._Referrals = new EntitySet<Referrals>(new Action<Referrals>(this.attach_Referrals), new Action<Referrals>(this.detach_Referrals));
			this._Users = new EntitySet<Users>(new Action<Users>(this.attach_Users), new Action<Users>(this.detach_Users));
			this._Visits = new EntitySet<Visits>(new Action<Visits>(this.attach_Visits), new Action<Visits>(this.detach_Visits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecializationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SpecializationID
		{
			get
			{
				return this._SpecializationID;
			}
			set
			{
				if ((this._SpecializationID != value))
				{
					this.OnSpecializationIDChanging(value);
					this.SendPropertyChanging();
					this._SpecializationID = value;
					this.SendPropertyChanged("SpecializationID");
					this.OnSpecializationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecializationName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string SpecializationName
		{
			get
			{
				return this._SpecializationName;
			}
			set
			{
				if ((this._SpecializationName != value))
				{
					this.OnSpecializationNameChanging(value);
					this.SendPropertyChanging();
					this._SpecializationName = value;
					this.SendPropertyChanged("SpecializationName");
					this.OnSpecializationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecializationImage", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary SpecializationImage
		{
			get
			{
				return this._SpecializationImage;
			}
			set
			{
				if ((this._SpecializationImage != value))
				{
					this.OnSpecializationImageChanging(value);
					this.SendPropertyChanging();
					this._SpecializationImage = value;
					this.SendPropertyChanged("SpecializationImage");
					this.OnSpecializationImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specializations_Referrals", Storage="_Referrals", ThisKey="SpecializationID", OtherKey="SpecializationId")]
		public EntitySet<Referrals> Referrals
		{
			get
			{
				return this._Referrals;
			}
			set
			{
				this._Referrals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specializations_Users", Storage="_Users", ThisKey="SpecializationID", OtherKey="specializationID")]
		public EntitySet<Users> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specializations_Visits", Storage="_Visits", ThisKey="SpecializationID", OtherKey="SpecializationID")]
		public EntitySet<Visits> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Referrals(Referrals entity)
		{
			this.SendPropertyChanging();
			entity.Specializations = this;
		}
		
		private void detach_Referrals(Referrals entity)
		{
			this.SendPropertyChanging();
			entity.Specializations = null;
		}
		
		private void attach_Users(Users entity)
		{
			this.SendPropertyChanging();
			entity.Specializations = this;
		}
		
		private void detach_Users(Users entity)
		{
			this.SendPropertyChanging();
			entity.Specializations = null;
		}
		
		private void attach_Visits(Visits entity)
		{
			this.SendPropertyChanging();
			entity.Specializations = this;
		}
		
		private void detach_Visits(Visits entity)
		{
			this.SendPropertyChanging();
			entity.Specializations = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Pesel;
		
		private string _Password;
		
		private string _FirstName;
		
		private string _LastName;
		
		private int _CategoryID;
		
		private System.Nullable<int> _specializationID;
		
		private bool _IsActive;
		
		private EntitySet<Referrals> _Referrals;
		
		private EntitySet<Referrals> _Referrals1;
		
		private EntitySet<Visits> _Visits;
		
		private EntitySet<Visits> _Visits1;
		
		private EntityRef<Specializations> _Specializations;
		
		private EntityRef<UserCategories> _UserCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnPeselChanging(string value);
    partial void OnPeselChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnspecializationIDChanging(System.Nullable<int> value);
    partial void OnspecializationIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Users()
		{
			this._Referrals = new EntitySet<Referrals>(new Action<Referrals>(this.attach_Referrals), new Action<Referrals>(this.detach_Referrals));
			this._Referrals1 = new EntitySet<Referrals>(new Action<Referrals>(this.attach_Referrals1), new Action<Referrals>(this.detach_Referrals1));
			this._Visits = new EntitySet<Visits>(new Action<Visits>(this.attach_Visits), new Action<Visits>(this.detach_Visits));
			this._Visits1 = new EntitySet<Visits>(new Action<Visits>(this.attach_Visits1), new Action<Visits>(this.detach_Visits1));
			this._Specializations = default(EntityRef<Specializations>);
			this._UserCategories = default(EntityRef<UserCategories>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pesel", DbType="VarChar(11) NOT NULL", CanBeNull=false)]
		public string Pesel
		{
			get
			{
				return this._Pesel;
			}
			set
			{
				if ((this._Pesel != value))
				{
					this.OnPeselChanging(value);
					this.SendPropertyChanging();
					this._Pesel = value;
					this.SendPropertyChanged("Pesel");
					this.OnPeselChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._UserCategories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_specializationID", DbType="Int")]
		public System.Nullable<int> specializationID
		{
			get
			{
				return this._specializationID;
			}
			set
			{
				if ((this._specializationID != value))
				{
					if (this._Specializations.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnspecializationIDChanging(value);
					this.SendPropertyChanging();
					this._specializationID = value;
					this.SendPropertyChanged("specializationID");
					this.OnspecializationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Referrals", Storage="_Referrals", ThisKey="UserID", OtherKey="DoctorID")]
		public EntitySet<Referrals> Referrals
		{
			get
			{
				return this._Referrals;
			}
			set
			{
				this._Referrals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Referrals1", Storage="_Referrals1", ThisKey="UserID", OtherKey="PatientID")]
		public EntitySet<Referrals> Referrals1
		{
			get
			{
				return this._Referrals1;
			}
			set
			{
				this._Referrals1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Visits", Storage="_Visits", ThisKey="UserID", OtherKey="DoctorID")]
		public EntitySet<Visits> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Visits1", Storage="_Visits1", ThisKey="UserID", OtherKey="PatientID")]
		public EntitySet<Visits> Visits1
		{
			get
			{
				return this._Visits1;
			}
			set
			{
				this._Visits1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specializations_Users", Storage="_Specializations", ThisKey="specializationID", OtherKey="SpecializationID", IsForeignKey=true)]
		public Specializations Specializations
		{
			get
			{
				return this._Specializations.Entity;
			}
			set
			{
				Specializations previousValue = this._Specializations.Entity;
				if (((previousValue != value) 
							|| (this._Specializations.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Specializations.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Specializations.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._specializationID = value.SpecializationID;
					}
					else
					{
						this._specializationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Specializations");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserCategories_Users", Storage="_UserCategories", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public UserCategories UserCategories
		{
			get
			{
				return this._UserCategories.Entity;
			}
			set
			{
				UserCategories previousValue = this._UserCategories.Entity;
				if (((previousValue != value) 
							|| (this._UserCategories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserCategories.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._UserCategories.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("UserCategories");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Referrals(Referrals entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Referrals(Referrals entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Referrals1(Referrals entity)
		{
			this.SendPropertyChanging();
			entity.Users1 = this;
		}
		
		private void detach_Referrals1(Referrals entity)
		{
			this.SendPropertyChanging();
			entity.Users1 = null;
		}
		
		private void attach_Visits(Visits entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Visits(Visits entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Visits1(Visits entity)
		{
			this.SendPropertyChanging();
			entity.Users1 = this;
		}
		
		private void detach_Visits1(Visits entity)
		{
			this.SendPropertyChanging();
			entity.Users1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserCategories")]
	public partial class UserCategories : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private string _CategoryName;
		
		private EntitySet<Users> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public UserCategories()
		{
			this._Users = new EntitySet<Users>(new Action<Users>(this.attach_Users), new Action<Users>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserCategories_Users", Storage="_Users", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<Users> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(Users entity)
		{
			this.SendPropertyChanging();
			entity.UserCategories = this;
		}
		
		private void detach_Users(Users entity)
		{
			this.SendPropertyChanging();
			entity.UserCategories = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Visits")]
	public partial class Visits : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VisitID;
		
		private System.DateTime _VisitDateTime;
		
		private int _PatientID;
		
		private int _DoctorID;
		
		private System.Nullable<int> _SpecializationID;
		
		private System.Nullable<int> _ReferralID;
		
		private EntityRef<Users> _Users;
		
		private EntityRef<Referrals> _Referrals;
		
		private EntityRef<Specializations> _Specializations;
		
		private EntityRef<Users> _Users1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitIDChanging(int value);
    partial void OnVisitIDChanged();
    partial void OnVisitDateTimeChanging(System.DateTime value);
    partial void OnVisitDateTimeChanged();
    partial void OnPatientIDChanging(int value);
    partial void OnPatientIDChanged();
    partial void OnDoctorIDChanging(int value);
    partial void OnDoctorIDChanged();
    partial void OnSpecializationIDChanging(System.Nullable<int> value);
    partial void OnSpecializationIDChanged();
    partial void OnReferralIDChanging(System.Nullable<int> value);
    partial void OnReferralIDChanged();
    #endregion
		
		public Visits()
		{
			this._Users = default(EntityRef<Users>);
			this._Referrals = default(EntityRef<Referrals>);
			this._Specializations = default(EntityRef<Specializations>);
			this._Users1 = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					this.OnVisitIDChanging(value);
					this.SendPropertyChanging();
					this._VisitID = value;
					this.SendPropertyChanged("VisitID");
					this.OnVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime VisitDateTime
		{
			get
			{
				return this._VisitDateTime;
			}
			set
			{
				if ((this._VisitDateTime != value))
				{
					this.OnVisitDateTimeChanging(value);
					this.SendPropertyChanging();
					this._VisitDateTime = value;
					this.SendPropertyChanged("VisitDateTime");
					this.OnVisitDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int NOT NULL")]
		public int PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					if (this._Users1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", DbType="Int NOT NULL")]
		public int DoctorID
		{
			get
			{
				return this._DoctorID;
			}
			set
			{
				if ((this._DoctorID != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctorIDChanging(value);
					this.SendPropertyChanging();
					this._DoctorID = value;
					this.SendPropertyChanged("DoctorID");
					this.OnDoctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecializationID", DbType="Int")]
		public System.Nullable<int> SpecializationID
		{
			get
			{
				return this._SpecializationID;
			}
			set
			{
				if ((this._SpecializationID != value))
				{
					if (this._Specializations.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecializationIDChanging(value);
					this.SendPropertyChanging();
					this._SpecializationID = value;
					this.SendPropertyChanged("SpecializationID");
					this.OnSpecializationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferralID", DbType="Int")]
		public System.Nullable<int> ReferralID
		{
			get
			{
				return this._ReferralID;
			}
			set
			{
				if ((this._ReferralID != value))
				{
					if (this._Referrals.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReferralIDChanging(value);
					this.SendPropertyChanging();
					this._ReferralID = value;
					this.SendPropertyChanged("ReferralID");
					this.OnReferralIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Visits", Storage="_Users", ThisKey="DoctorID", OtherKey="UserID", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._DoctorID = value.UserID;
					}
					else
					{
						this._DoctorID = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Referrals_Visits", Storage="_Referrals", ThisKey="ReferralID", OtherKey="ReferralID", IsForeignKey=true)]
		public Referrals Referrals
		{
			get
			{
				return this._Referrals.Entity;
			}
			set
			{
				Referrals previousValue = this._Referrals.Entity;
				if (((previousValue != value) 
							|| (this._Referrals.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Referrals.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._Referrals.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._ReferralID = value.ReferralID;
					}
					else
					{
						this._ReferralID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Referrals");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specializations_Visits", Storage="_Specializations", ThisKey="SpecializationID", OtherKey="SpecializationID", IsForeignKey=true)]
		public Specializations Specializations
		{
			get
			{
				return this._Specializations.Entity;
			}
			set
			{
				Specializations previousValue = this._Specializations.Entity;
				if (((previousValue != value) 
							|| (this._Specializations.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Specializations.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._Specializations.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._SpecializationID = value.SpecializationID;
					}
					else
					{
						this._SpecializationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Specializations");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Visits1", Storage="_Users1", ThisKey="PatientID", OtherKey="UserID", IsForeignKey=true)]
		public Users Users1
		{
			get
			{
				return this._Users1.Entity;
			}
			set
			{
				Users previousValue = this._Users1.Entity;
				if (((previousValue != value) 
							|| (this._Users1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users1.Entity = null;
						previousValue.Visits1.Remove(this);
					}
					this._Users1.Entity = value;
					if ((value != null))
					{
						value.Visits1.Add(this);
						this._PatientID = value.UserID;
					}
					else
					{
						this._PatientID = default(int);
					}
					this.SendPropertyChanged("Users1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ViewSpecializations")]
	public partial class ViewSpecializations
	{
		
		private int _SpecializationID;
		
		private string _SpecializationName;
		
		private System.Data.Linq.Binary _SpecializationImage;
		
		public ViewSpecializations()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecializationID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int SpecializationID
		{
			get
			{
				return this._SpecializationID;
			}
			set
			{
				if ((this._SpecializationID != value))
				{
					this._SpecializationID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecializationName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string SpecializationName
		{
			get
			{
				return this._SpecializationName;
			}
			set
			{
				if ((this._SpecializationName != value))
				{
					this._SpecializationName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecializationImage", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary SpecializationImage
		{
			get
			{
				return this._SpecializationImage;
			}
			set
			{
				if ((this._SpecializationImage != value))
				{
					this._SpecializationImage = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ViewUsers")]
	public partial class ViewUsers
	{
		
		private int _UserID;
		
		private string _Pesel;
		
		private string _LastName;
		
		private string _FirstName;
		
		private string _SpecializationName;
		
		private string _CategoryName;
		
		private System.Nullable<int> _specializationID;
		
		private bool _IsActive;
		
		private int _CategoryID;
		
		public ViewUsers()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pesel", DbType="VarChar(11) NOT NULL", CanBeNull=false)]
		public string Pesel
		{
			get
			{
				return this._Pesel;
			}
			set
			{
				if ((this._Pesel != value))
				{
					this._Pesel = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecializationName", DbType="VarChar(64)")]
		public string SpecializationName
		{
			get
			{
				return this._SpecializationName;
			}
			set
			{
				if ((this._SpecializationName != value))
				{
					this._SpecializationName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this._CategoryName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_specializationID", DbType="Int")]
		public System.Nullable<int> specializationID
		{
			get
			{
				return this._specializationID;
			}
			set
			{
				if ((this._specializationID != value))
				{
					this._specializationID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this._CategoryID = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ViewUserWithoutAdmin")]
	public partial class ViewUserWithoutAdmin
	{
		
		private int _UserID;
		
		private string _Pesel;
		
		private string _LastName;
		
		private string _FirstName;
		
		private string _SpecializationName;
		
		private string _CategoryName;
		
		private System.Nullable<int> _specializationID;
		
		private bool _IsActive;
		
		private int _CategoryID;
		
		public ViewUserWithoutAdmin()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pesel", DbType="VarChar(11) NOT NULL", CanBeNull=false)]
		public string Pesel
		{
			get
			{
				return this._Pesel;
			}
			set
			{
				if ((this._Pesel != value))
				{
					this._Pesel = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecializationName", DbType="VarChar(64)")]
		public string SpecializationName
		{
			get
			{
				return this._SpecializationName;
			}
			set
			{
				if ((this._SpecializationName != value))
				{
					this._SpecializationName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this._CategoryName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_specializationID", DbType="Int")]
		public System.Nullable<int> specializationID
		{
			get
			{
				return this._specializationID;
			}
			set
			{
				if ((this._specializationID != value))
				{
					this._specializationID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this._CategoryID = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
